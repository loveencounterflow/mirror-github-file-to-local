{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-mirror-with-git.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  white\n  gold\n  reverse\n  log     }               = GUY.trm\n\n{ execa\n  $ }                     = require 'execa'\n# debug 'Ω___1', require 'execa'\n# debug 'Ω___2', execa\n# debug 'Ω___3', $\n# debug 'Ω___4', $.sync\n# # { $: zx, cd: zx_cd }      = require 'zx'\n\n#===========================================================================================================\ndemo_execa = ->\n  # debug 'Ω___5', d for d from await execa\"trash nosuchfile\"\n  count = 0\n  # for await line from ( execa { cwd: '/home/flow/jzr/bing-image-creator-downloader', } )\"cat /usr/share/dict/ngerman\"\n  lines = ( $.sync { cwd: '/home/flow/jzr/bing-image-creator-downloader', } )\"ls -AlF\"\n  lines = lines.stdout\n  lines = lines.split '\\n'\n  # for line from ( $.sync { cwd: '/home/flow/jzr/bing-image-creator-downloader', } )\"ls -AlF\"\n  for line from lines\n    count++; break if count > 10000\n    help 'Ω___6', rpr line\n  return null\n\n#===========================================================================================================\nlines_of = ( execa_sync_result ) ->\n  lines = execa_sync_result.stdout\n  return lines.split '\\n'\n\n#===========================================================================================================\nclass Nn\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = @compile_cfg cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_additional_paths: ( path ) ->\n    #.......................................................................................................\n    multiply_marker_re = ///^ (?<path> .+ ) \\+\\+\\+ $///\n    unless ( match = path.match multiply_marker_re )?\n      yield path\n      return null\n    { path } = match.groups\n    yield path\n    #.......................................................................................................\n    ### NOTE could have several clauses for other file types below ###\n    coffee_path_re = ///^ (?<prefix>.+) /src/ (?<basename> [^ \\/ ]+ )\\.coffee $///\n    unless ( match = path.match coffee_path_re )?\n      return null\n    { prefix\n      basename } = match.groups\n    yield \"#{prefix}/lib/#{basename}.js\"\n    yield \"#{prefix}/lib/#{basename}.js.map\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  paths_by_repo_from_paths: ( paths ) ->\n    user_and_repo_re = ///^ (?<user> [^ \\/ ]+ ) / (?<repo> [^ \\/ ]+ ) / (?<filename> .+ ) $///\n    paths_by_repo = {}\n    for original_path in paths\n      for derived_path from @walk_additional_paths original_path\n        unless ( match = derived_path.match user_and_repo_re )?\n          warn \"Ω___7 malformed path: #{rpr derived_path}\"\n          continue\n        { user\n          repo\n          filename } = match.groups\n        key = \"#{user}/#{repo}\"\n        ( paths_by_repo[ key ] ?= [] ).push filename\n    return { paths_by_repo, }\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_git_mirror: ({ local_mirror_path, github_url, }) ->\n    ### TAINT use proper cfg instead ###\n    # set -x\n    show = ( ref, execa_sync_result ) ->\n      for line in lines_of execa_sync_result\n        continue if line is ''\n        whisper 'Ω___8', ref, line\n      return null\n    show 'Ω___9', ( $.sync                            )\"mkdir -p #{local_mirror_path}\"\n    show 'Ω__10', ( $.sync { cwd: local_mirror_path } )\"git init\"\n    show 'Ω__11', ( $.sync { cwd: local_mirror_path } )\"git remote add origin #{github_url}\"\n    show 'Ω__12', ( $.sync { cwd: local_mirror_path } )\"git fetch --depth=1 origin\"\n    show 'Ω__13', ( $.sync { cwd: local_mirror_path } )\"git config core.sparseCheckout true\"\n    ### TAINT get file list from walk_additional_paths: ###\n    show 'Ω__14', ( $.sync { cwd: local_mirror_path } )\"echo ''                 >  .git/info/sparse-checkout\"\n    show 'Ω__15', ( $.sync { cwd: local_mirror_path } )\"echo 'src/main.coffee'  >> .git/info/sparse-checkout\"\n    show 'Ω__16', ( $.sync { cwd: local_mirror_path } )\"echo 'lib/main.js'      >> .git/info/sparse-checkout\"\n    show 'Ω__17', ( $.sync { cwd: local_mirror_path } )\"echo 'lib/main.js.map'  >> .git/info/sparse-checkout\"\n    ### TAINT this should become an update/checkout command: ###\n    show 'Ω__18', ( $.sync { cwd: local_mirror_path } )\"git checkout --quiet origin/main\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  compile_cfg: ( cfg ) ->\n    cfg        ?= {}\n    R           = {}\n    R.target    = cfg.target ?= 'github-mirrors'\n    R.files     = cfg.files ? []\n    Object.assign R, @paths_by_repo_from_paths R.files\n    R.checkouts = {}\n    for user_and_repo of R.paths_by_repo\n      R.checkouts[ user_and_repo ] = ( cfg.checkouts ? {} )[ user_and_repo ] ? 'origin/main'\n    R.symlinks  = cfg.symlinks ? {}\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  show_config: ( cfg = null ) ->\n    object_prototype  = Object.getPrototypeOf {}\n    keycolor          = gold\n    valuecolor        = white\n    cfg              ?= @cfg\n    for key, value of cfg\n      switch true\n        when Array.isArray value\n          echo keycolor key + ':' + ' []'\n          for sub_value in value\n            echo ' ', valuecolor rpr sub_value\n        when ( Object.getPrototypeOf value ) in [ null, object_prototype, ]\n          echo keycolor key + ':' # + ' {}'\n          for sub_key, sub_value of value\n            if Array.isArray sub_value\n              echo ' ', ( keycolor sub_key + ':' + ' []' )\n              echo '   ', ( valuecolor rpr v ) for v in sub_value\n            else\n              echo ' ', \"#{keycolor sub_key + ':'} #{valuecolor sub_value}\"\n        else\n          echo ( keycolor key + ':' ), ( valuecolor rpr value )\n    return null\n\n#===========================================================================================================\ndemo_walk_js_paths_from_coffee_path = ->\n  nn = new Nn mirror_github_file_to_local_json\n  info 'Ω__31', '————————————————————————————————————————————————————'\n  info()\n  nn.show_config()\n  info()\n  return null\n\n#===========================================================================================================\n# cfg =\n#   git_mirrors_path:   './github-mirrors'\n#   user_and_repo:      'loveencounterflow/cleartype'\n#   github_url:         \"https://github.com/$user_and_repo\"\n#   local_mirror_path:  \"$git_mirrors_path/$user_and_repo\"\n\n#===========================================================================================================\nmirror_github_file_to_local_json =\n  ### path to folder where git repos are going to be mirrored ###\n  target: 'github-mirrors'\n\n  ### Revision to checkout; keys are `$user/$repo` pairs, values are strings that can appear behind `git\n  checkout`, such as\n  * 'main'\n  * 'HEAD'\n  * '6f39a6032243cb81c2351091cd3b611edf94433a'\n  * '6f39a603'\n  * 'origin/main'\n  The default is 'origin/main' for missing `$user/$repo` entries.\n  ###\n  checkouts:\n    'loveencounterflow/cleartype': 'a5d688cf9b'\n\n  ### List of file paths; all paths must start with a `$user/$repo` pair; paths that end in `+++` will be\n  expanded to several paths by `Nn::walk_additional_paths()`. ###\n  files: [\n    'loveencounterflow/cleartype/src/main.coffee+++'\n    'loveencounterflow/cleartype/src/helpers.coffee+++'\n    'loveencounterflow/cleartype/src/builtins.coffee+++'\n    'loveencounterflow/mirror-github-file-to-local/bin/mirror-with-git'\n    ]\n\n  ### Paths of symlinks to be prepared for files, keyed by their local origin paths, relative to `target`.\n  Note that file paths may be implicitly added by `Nn::walk_additional_paths()`. ###\n  symlinks:\n    ### NOTE implicit consequence of entry 'loveencounterflow/cleartype/src/builtins.coffee+++': ###\n    'loveencounterflow/cleartype/lib/builtins.js': 'lib/cleartype-builtins.js'\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_execa()\n  demo_walk_js_paths_from_coffee_path()\n  return null\n\n# f = ->\n#   ### NOTE commit ID can be shortened ###\n#   \"https://raw.githubusercontent.com/loveencounterflow/mirror-github-file-to-local/7fccc7ec115302ab4d1e44e0a4c78b60d8215d94/index.js\"\n#   \"https://raw.githubusercontent.com/#{user_and_repo}/7fccc7ec115302ab4d1e44e0a4c78b60d8215d94/#{relative_path}\"\n\n\n\n"
  ]
}